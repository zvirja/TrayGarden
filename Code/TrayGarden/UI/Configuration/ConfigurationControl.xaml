<UserControl x:Class="TrayGarden.UI.Configuration.ConfigurationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:common="clr-namespace:TrayGarden.UI.Common"
             xmlns:converters="clr-namespace:TrayGarden.UI.Common.Converters"
             xmlns:configuration="clr-namespace:TrayGarden.UI.Configuration"
             xmlns:entryVMs="clr-namespace:TrayGarden.UI.Configuration.EntryVM"
             xmlns:valueValidators="clr-namespace:TrayGarden.UI.Configuration.ValueValidators"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="600" d:DataContext="{d:DesignInstance configuration:ConfigurationControlVM}">
  <UserControl.Resources>
    <converters:StringHasValueToBoolConverterDebug x:Key="StringHasValueToBoolConverterDebug" />

    <!-- Reset image-->
    <BitmapImage x:Key="ResetIcon" UriSource="Images/reset2.png" />

    <!--Style for setting entry value-->
    <Style x:Key="SettingValueStyle" TargetType="Control">
      <Setter Property="FontSize" Value="20" />
      <Setter Property="HorizontalContentAlignment" Value="Center" />
      <Setter Property="VerticalContentAlignment" Value="Center" />
      <Setter Property="IsEnabled" Value="{Binding Path=AllowEditing}" />
    </Style>

    <!--Style for setting entry name-->
    <Style x:Key="SettingNameStyle" TargetType="TextBlock">
      <Setter Property="FontSize" Value="20" />
      <Setter Property="HorizontalAlignment" Value="Stretch" />
      <Setter Property="TextAlignment" Value="Center" />
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Margin" Value="5 0"/>
      <Style.Triggers>
        <!--Modify cursor if name contains description-->
        <DataTrigger Binding="{Binding Path=DataContext.SettingDescription, Mode=OneWay, Converter={StaticResource StringHasValueToBoolConverter}}" Value="True">
          <Setter Property="Cursor" Value="Help" />
        </DataTrigger>
        <!--Set unactive background if readonly-->
        <DataTrigger Binding="{Binding Path=DataContext.AllowEditing}" Value="False">
          <Setter Property="Foreground" Value="Gray" />
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <Style x:Key="SettingGrid" TargetType="Grid">
      <Setter Property="Margin" Value="0 5" />
      <Setter Property="Background" Value="LightGreen" />
    </Style>

    <Style x:Key="ResetBtn" TargetType="Button">
      <Setter Property="ToolTip" Value="{Binding Path=DataContext.RestoreDefaultValueTooltip}" />
      <Setter Property="Margin" Value="5 0 0 0" />
      <Setter Property="Padding" Value="3 0" />
      <Setter Property="Cursor" Value="Hand" />
      <Setter Property="Command" Value="{Binding Path=DataContext.RestoreDefaultValue}" />
      <Setter Property="IsEnabled" Value="{Binding Path=DataContext.AllowEditing}" />
      <Setter Property="Visibility" >
        <Setter.Value>
          <Binding ConverterParameter="collapsed" Path="DataContext.HideResetButton">
            <Binding.Converter>
              <converters:CombiningConverter FirstConverter="{StaticResource BooleanNotConverter}" SecondConverter="{StaticResource BooleanToVisibilityConverter}" />
            </Binding.Converter>
          </Binding>
        </Setter.Value>
      </Setter>
    </Style>

    <Style x:Key="ResetBtnImage" TargetType="Image">
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Source" Value="{StaticResource ResetIcon}" />
      <Setter Property="Stretch" Value="None" />
      <Setter Property="ToolTip" Value="XXXXXXXXXXX" />
    </Style>

    <!-- Style for setting description text -->
    <Style x:Key="ToolTipTextBlock" TargetType="TextBlock">
      <Setter Property="Text" Value="{Binding Path=DataContext.SettingDescription}" />
      <Setter Property="Foreground" Value="Black" />
      <Setter Property="Background" Value="White" />
      <Setter Property="Margin" Value="4" />
      <Setter Property="FontSize" Value="14" />
    </Style>

    <!-- Style for setting description popup -->
    <Style x:Key="PopupTooltip" TargetType="Popup">
      <Setter Property="IsOpen">
        <Setter.Value>
          <MultiBinding Mode="OneWay" Converter="{StaticResource BooleanAndConverter}">
            <Binding ElementName="SettingName" Path="IsMouseOver" Mode="OneWay" />
            <Binding Path="DataContext.SettingDescription" Mode="OneWay" Converter="{StaticResource StringHasValueToBoolConverter}" />
          </MultiBinding>
        </Setter.Value>
      </Setter>
      <Setter Property="PlacementTarget" Value="{Binding ElementName=SettingName}" />
      <Setter Property="Placement" Value="Mouse" />
    </Style>

    <DataTemplate x:Key="SettingDescriptionTooltip">
      <Popup Style="{StaticResource PopupTooltip}">
        <Grid Background="White">
          <TextBlock Style="{StaticResource ToolTipTextBlock}" TextWrapping="Wrap" />
        </Grid>
      </Popup>
    </DataTemplate>

    <!-- This button represents bool setting (big checkbox) -->
    <Style x:Key="BoolSettingValueToogleButton" BasedOn="{StaticResource SettingValueStyle}" TargetType="ToggleButton">
      <Setter Property="Cursor" Value="Hand" />

      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ToggleButton}">
            <Border x:Name="border" CornerRadius="2" Background="LightGray" BorderThickness="0" SnapsToDevicePixels="True">
              <ContentPresenter />
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" TargetName="border" Value="#5CE65C"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

  </UserControl.Resources>
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto" />
      <RowDefinition />
      <RowDefinition Height="Auto" />
    </Grid.RowDefinitions>

    <!-- Setting window description section-->
    <TextBlock Grid.Row="0" FontSize="14" TextWrapping="Wrap" Foreground="DarkGray" Padding="10 5 0 0" Text="{Binding Path=ConfigurationDescription}">
            
            <!-- display description only if is present -->
      <TextBlock.Resources>
        <converters:ChainCombiningConverter x:Key="StringValuePresentToVisibility">
          <converters:ChainCombiningConverter.ConventerChain>
            <converters:StringHasValueToBoolConverter />
            <BooleanToVisibilityConverter />
          </converters:ChainCombiningConverter.ConventerChain>
        </converters:ChainCombiningConverter>
      </TextBlock.Resources>
      <TextBlock.Visibility>
        <Binding Path="ConfigurationDescription" Converter="{StaticResource StringValuePresentToVisibility}" />
      </TextBlock.Visibility>
    </TextBlock>

    <!-- Control with all settings -->
    <ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
      <!-- Enumerate settings -->
      <ItemsControl ItemsSource="{Binding Path=ConfigurationEntries}" Margin="10">
        <!-- vertical panel (is required) -->
        <ItemsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <StackPanel Orientation="Vertical" />
          </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>

        <!-- Template for "CustomAction" element-->
        <ItemsControl.Resources>
          <DataTemplate x:Key="CustomActionLayout">
            <Button Command="{Binding Action}" Margin="3 0 0 0" Cursor="Hand" ToolTip="{Binding Path=Hint}">
              <Image Source="{Binding Path=LabelImage}" />
            </Button>
          </DataTemplate>
          
          <!-- Common setting template -->
          <DataTemplate x:Key="SettingLayoutRegular">
            <Grid Style="{StaticResource SettingGrid}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition MinHeight="32" />
              </Grid.RowDefinitions>
              <TextBlock x:Name="SettingName" Style="{StaticResource SettingNameStyle}" Text="{Binding DataContext.SettingName }" />
              <ContentPresenter Grid.Column="0" ContentTemplate="{StaticResource SettingDescriptionTooltip}" />
              <ContentPresenter Grid.Column="1" Content="{Binding}" />            
              <Button Grid.Column="2" Style="{StaticResource ResetBtn}">
                <Image Style="{StaticResource ResetBtnImage}" />
              </Button>
              <!--Custom actions-->
              <ItemsControl Grid.Column="3" ItemTemplate="{StaticResource CustomActionLayout}" ItemsSource="{Binding Path=DataContext.AdditionalActions}">
                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
              </ItemsControl>
            </Grid>
          </DataTemplate>

          <!-- Bool setting markup -->
          <DataTemplate DataType="{x:Type entryVMs:BoolConfigurationEntryVM}">
            <ContentControl ContentTemplate="{StaticResource SettingLayoutRegular}">
              <ToggleButton x:Name="IsEnabledToggleButton" Style="{StaticResource BoolSettingValueToogleButton}" IsChecked="{Binding Path=Value, Mode=TwoWay}" >
                <CheckBox HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource SettingValueStyle}" Cursor="Hand" IsChecked="{Binding ElementName=IsEnabledToggleButton, Path=IsChecked, Mode=TwoWay}">
                  <CheckBox.LayoutTransform>
                    <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                  </CheckBox.LayoutTransform>
                </CheckBox>
              </ToggleButton>
            </ContentControl>
          </DataTemplate>

          <!-- String setting markup -->
          <DataTemplate DataType="{x:Type entryVMs:StringConfigurationEntryVM}">
            <ContentControl ContentTemplate="{StaticResource SettingLayoutRegular}">
              <TextBox Style="{StaticResource SettingValueStyle}" Text="{Binding Path=Value}" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" AcceptsReturn="True"/>
            </ContentControl>
          </DataTemplate>

          <!-- Int setting markup -->
          <DataTemplate DataType="{x:Type entryVMs:IntConfigurationEntryVM}">
            <ContentControl ContentTemplate="{StaticResource SettingLayoutRegular}">
              <TextBox Style="{StaticResource SettingValueStyle}" >
                <TextBox.Text>
                  <Binding Path="Value">
                    <Binding.ValidationRules>
                      <valueValidators:IntValidator />
                    </Binding.ValidationRules>
                  </Binding>
                </TextBox.Text>
              </TextBox>
            </ContentControl>
          </DataTemplate>

          <!-- Double setting markup -->
          <DataTemplate DataType="{x:Type entryVMs:DoubleConfigurationEntryVM}">
            <ContentControl ContentTemplate="{StaticResource SettingLayoutRegular}">
              <TextBox Style="{StaticResource SettingValueStyle}" >
                <TextBox.Text>
                  <Binding Path="Value">
                    <Binding.ValidationRules>
                      <valueValidators:DoubleValidator />
                    </Binding.ValidationRules>
                  </Binding>
                </TextBox.Text>
              </TextBox>
            </ContentControl>
          </DataTemplate>

          <!-- String option setting markup -->
          <DataTemplate DataType="{x:Type entryVMs:StringOptionConfigurationEntryVM}">
            <ContentControl ContentTemplate="{StaticResource SettingLayoutRegular}">
              <ComboBox Style="{StaticResource SettingValueStyle}" ItemsSource="{Binding Path=AllPossibleOptions}" Text="{Binding Path=Value}" />
            </ContentControl>
          </DataTemplate>

          <!-- Action setting markup -->
          <DataTemplate DataType="{x:Type entryVMs:ActionConfigurationEntry}">
            <ContentControl ContentTemplate="{StaticResource SettingLayoutRegular}">
              <Button Style="{StaticResource SettingValueStyle}" Command="{Binding Path=Action}" Content="{Binding Path=ActionTitle}" Cursor="Hand" />
            </ContentControl>
          </DataTemplate>
        </ItemsControl.Resources>
      </ItemsControl>
    </ScrollViewer>

    <!-- App reboot line -->
    <Grid Grid.Row="2" Background="LightSteelBlue" Visibility="{Binding Path=RebootRequired, Converter={StaticResource BooleanToVisibilityConverter}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <TextBlock Foreground="IndianRed" FontWeight="Bold" FontSize="14" Padding="15 3 0 3" >Some modified settings require application reboot to be applied.</TextBlock>
      <Button Margin="0 3 15 3"  
                    FontStyle="Italic" 
                    FontWeight="Bold" 
                    FontSize="13" 
                    Grid.Column="1" 
                    Style="{StaticResource LinkButton}" 
                    Content="Reboot now" 
                    Command="{Binding Path=RebootApplication}" />
    </Grid>
  </Grid>
</UserControl>